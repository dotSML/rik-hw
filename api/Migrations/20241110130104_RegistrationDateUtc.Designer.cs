// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241110130104_RegistrationDateUtc")]
    partial class RegistrationDateUtc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("api.Domain.Entities.Attendee", b =>
                {
                    b.Property<Guid>("AttendeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AttendeeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParticipantRequests")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AttendeeId");

                    b.ToTable("Attendees");

                    b.HasDiscriminator<string>("AttendeeType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("api.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("api.Domain.Entities.EventAttendee", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "AttendeeId");

                    b.HasIndex("AttendeeId");

                    b.ToTable("EventAttendees");
                });

            modelBuilder.Entity("api.Domain.Entities.LegalEntityAttendee", b =>
                {
                    b.HasBaseType("api.Domain.Entities.Attendee");

                    b.Property<int>("AttendeeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyRegistrationCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("LegalEntity");
                });

            modelBuilder.Entity("api.Domain.Entities.NaturalPersonAttendee", b =>
                {
                    b.HasBaseType("api.Domain.Entities.Attendee");

                    b.Property<string>("PersonalIdCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("NaturalPerson");
                });

            modelBuilder.Entity("api.Domain.Entities.Attendee", b =>
                {
                    b.OwnsOne("api.Domain.ValueObjects.PaymentMethod", "PaymentMethod", b1 =>
                        {
                            b1.Property<Guid>("AttendeeId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Method")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("AttendeeId");

                            b1.ToTable("Attendees");

                            b1.WithOwner()
                                .HasForeignKey("AttendeeId");
                        });

                    b.Navigation("PaymentMethod")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Domain.Entities.EventAttendee", b =>
                {
                    b.HasOne("api.Domain.Entities.Attendee", "Attendee")
                        .WithMany("EventAttendees")
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Domain.Entities.Event", "Event")
                        .WithMany("EventAttendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("api.Domain.Entities.Attendee", b =>
                {
                    b.Navigation("EventAttendees");
                });

            modelBuilder.Entity("api.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventAttendees");
                });
#pragma warning restore 612, 618
        }
    }
}
